<!DOCTYPE html>
<html>
<head>
  <title>üöú Submit Load</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: url("/dt-bg.png") no-repeat center center fixed;
      background-size: cover;
      margin: 0;
      padding: 0;
      color: #fff;
      font-size: 20px;
    }
    .container {
      background: rgba(0, 0, 0, 0.8);
      padding: 30px 24px;
      max-width: 700px;
      margin: 40px auto;
      border-radius: 14px;
    }
    h1, h2, h3 {
      font-weight: bold;
      text-align: center;
    }
    h1 { font-size: 32px; margin-bottom: 10px; }
    h2 { font-size: 26px; margin-top: 30px; }
    h3 { font-size: 22px; margin-bottom: 12px; }
    label {
      font-size: 22px;
      font-weight: bold;
      display: block;
      margin-top: 18px;
    }
    select, input {
      width: 100%;
      padding: 16px;
      margin-top: 8px;
      border-radius: 6px;
      border: none;
      font-size: 20px;
    }
    button {
      padding: 16px 24px;
      font-size: 20px;
      background: #4CAF50;
      border: none;
      color: white;
      border-radius: 6px;
      cursor: pointer;
      width: 100%;
      font-weight: bold;
      margin-top: 16px;
    }
    .tracked {
      background: #222;
      padding: 18px;
      margin-top: 30px;
      border-radius: 10px;
      font-size: 20px;
    }
    .tracked ul { padding-left: 20px; }
    .form-section { margin-top: 30px; }

    #sync-banner, #offline-save-banner {
      text-align: center;
      font-size: 20px;
      font-weight: bold;
      padding: 10px;
      position: fixed;
      top: -100px;
      left: 0;
      right: 0;
      z-index: 9999;
      opacity: 0;
      transition: top 0.5s ease, opacity 0.5s ease;
    }
    #sync-banner { background: #222; color: #fff; }
    #offline-save-banner { background: green; color: white; }
    .show-banner {
      top: 0;
      opacity: 1;
    }
    .spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-top: 3px solid #fff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      vertical-align: middle;
      margin-right: 8px;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>

<div id="sync-banner"></div>
<div id="offline-save-banner">‚úÖ Load saved offline and will sync when back online.</div>
<div id="offline-banner" style="display:none; position:fixed; top:0; left:0; right:0; background:red; color:white; text-align:center; padding:10px; font-weight:bold; z-index:9999;">
  ‚ö†Ô∏è No internet connection. Submissions will be saved when you‚Äôre back online.
</div>

<script>
if ('serviceWorker' in navigator && 'SyncManager' in window) {
  navigator.serviceWorker.register('/service-worker.js').then(() => {
    console.log("‚úÖ Service Worker Registered");
    navigator.serviceWorker.ready.then(registration => {
      const syncBanner = document.getElementById("sync-banner");
      const offlineBanner = document.getElementById("offline-save-banner");

      navigator.serviceWorker.addEventListener("message", (event) => {
        if (event.data.type === "queue-update") {
          syncBanner.innerHTML = `<span class="spinner"></span> ‚è≥ ${event.data.count} load(s) waiting to sync`;
          syncBanner.classList.add("show-banner");
        } else if (event.data.type === "sync-complete") {
          syncBanner.innerHTML = event.data.count > 0
            ? `<span class="spinner"></span> ‚è≥ ${event.data.count} load(s) waiting to sync`
            : `‚úÖ All pending loads synced`;
          syncBanner.classList.add("show-banner");
          if (event.data.count === 0) {
            setTimeout(() => syncBanner.classList.remove("show-banner"), 5000);
          }
        } else if (event.data.type === "show-banner") {
          syncBanner.innerHTML = event.data.message;
          syncBanner.classList.add("show-banner");
        }
      });

      const forms = [
        { selector: "form[action='/load']", url: "/load" },
        { selector: "form[action='/submit-fuel']", url: "/submit-fuel" },
        { selector: "form[action='/submit-transfer']", url: "/submit-transfer" }
      ];

      forms.forEach(({ selector, url }) => {
        const form = document.querySelector(selector);
        form?.addEventListener("submit", async (e) => {
          if (!navigator.onLine) {
            e.preventDefault();
            const formData = new FormData(form);
            const data = {};
            formData.forEach((v, k) => data[k] = v);
            registration.active.postMessage({ type: "store-form", url, data });
            if (url === "/load") {
              offlineBanner.classList.add("show-banner");
              setTimeout(() => offlineBanner.classList.remove("show-banner"), 4000);
            } else {
              alert(`‚úÖ ${url.split("/")[1]} saved offline and will sync.`);
            }
          }
        });
      });
    });
  });

  window.addEventListener("online", async () => {
    const registration = await navigator.serviceWorker.ready;
    try {
      await registration.sync.register('sync-forms');
      console.log("üîÑ Sync triggered after reconnect");
    } catch (err) {
      console.error("‚ùå Failed to trigger sync", err);
    }
  });
}

function updateOnlineStatus() {
  const banner = document.getElementById("offline-banner");
  banner.style.display = navigator.onLine ? "none" : "block";
}
window.addEventListener("load", updateOnlineStatus);
window.addEventListener("online", updateOnlineStatus);
window.addEventListener("offline", updateOnlineStatus);
</script>

</body>
</html>
